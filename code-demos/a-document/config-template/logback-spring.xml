<?xml version="1.0" encoding="UTF-8"?>
<!-- 官方文档 http://logback.qos.ch/documentation.html，还可以编写自己的Appender。 -->

<!-- scan: 当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!-- scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为1分钟。-->
<!-- debug: 当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 使用springProperty标签引用application.yml的属性 -->
    <springProperty scope="context" name="app_name" source="spring.application.name"/>
    <property name="log_path" value="${user.dir}/log"/>

    <contextName>${app_name}</contextName>
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>

    <!-- 日志格式介绍
        %d{yyyy-MM-dd HH:mm:ss.SSS} %d表示时间; {yyyy-MM-dd HH:mm:ss.SSS}表示输出的时间格式
        %green(...) 表示用绿色输出括号里的内容
        %thread 表示输出日志的线程名，可以简写成 %t
        %-5level 表示日志级别，并且使用5个字符靠左对齐
        %logger{50} 表示具体的日志输出者，比如类名，括号内表示长度
        %msg 表示具体的日志消息，就是logger.info("xxx")中的xxx
        %n 平台的换行符
    -->
    <property name="pattern-console" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg %n"/>
    <property name="pattern-console-color"
              value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS}) [%thread] %highlight(%-5level) %red(%logger{50}) - %yellow(%msg) %n"/>
    <property name="pattern-file" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"/>

    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
        <!--            <level>info</level>-->
        <!--        </filter>-->
        <!-- 对日志进行格式化 -->
        <encoder>
            <!-- 日志格式 -->
            <Pattern>${pattern-console}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>

    </appender>

    <appender name="CONSOLE-WITH-COLOR" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern-console-color}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--输出到文件-->
    <!-- 时间滚动输出 level为 DEBUG 日志 -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <!--先将今天的日志保存在这个文件中-->
        <file>${log_path}/debug/${app_name}.log</file>
        <!-- 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是 true。 -->
        <append>true</append>
        <encoder>
            <pattern>${pattern-file}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。属性 class 定义具体的滚动策略类 -->
        <!-- ch.qos.logback.core.rolling.TimeBasedRollingPolicy 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <!-- ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动-->
        <!-- ch.qos.logback.core.rolling.FixedWindowRollingPolicy 根据固定窗口算法重命名文件的滚动策略。-->
        <!-- ch.qos.logback.core.rolling.TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- rollover daily -->
            <!--如果第二天输出日志,会将当天的日志记录在<file>${log_path}/log_debug.log</file>,然后将昨天的日志归档到下面的文件中-->
            <!--以分钟切分  %d{yyyy-MM-dd_HH-mm}-->
            <fileNamePattern>${log_path}/debug/${app_name}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
            <!--单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1-->
            <maxFileSize>1MB</maxFileSize>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。-->
            <maxHistory>30</maxHistory>
            <!--所有的日志文件最大20G，超过就会删除旧的日志-->
            <totalSizeCap>10MB</totalSizeCap>
        </rollingPolicy>
        <!--
            此日志文件只记录debug级别的
            onMatch和onMismatch都有三个属性值，分别为Accept、DENY和NEUTRAL
            onMatch="ACCEPT" 表示匹配该级别及以上
            onMatch="DENY" 表示不匹配该级别及以上
            onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表        示匹配该级别及以上
            onMismatch="ACCEPT" 表示匹配该级别以下
            onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的
            onMismatch="DENY" 表示不匹配该级别以下的
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为 DEBUG 日志 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log_path}/info/${app_name}.log</file>
        <append>true</append>
        <encoder>
            <pattern>${pattern-file}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log_path}/info/${app_name}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>1MB</maxFileSize>
            <maxHistory>30</maxHistory>
            <totalSizeCap>10MB</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- root配置必须在appender下边 -->
    <!-- root节点是对所有appender的管理，添加哪个appender就会打印哪个appender的日志。root节点实际上是配置启用哪种appender，可以添加多个appender。 -->
    <!-- root节点的level是总的日志级别控制，如果appender的日志级别设定比root的高,会按照appender的日志级别打印日志 -->
    <!-- 如果appender的日志级别比root的低，会按照root设定的日志级别进行打印日志 -->
    <!-- 也就是说root设定的日志级别是最低限制,如果root设定级别为最高ERROR，那么所有appender只能打印最高级别的日志 -->
    <root level="DEBUG">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="DEBUG_FILE"/>
    </root>

    <!-- logger 用于对单个包或类添加配置 -->
    <!-- name 可以是包名或者类名 -->
    <!-- level 设置日志输出的级别 -->a
    <!-- logger 的 appender 根据参数 additivity 决定是否向上级logger传递打印信息。-->
    <!-- logger 的级别是其自身定义的级别，和 root 的级别没什么关系。 -->
    <logger name="org.example" level="debug" additivity="false">
        <appender-ref ref="CONSOLE-WITH-COLOR"/>
        <appender-ref ref="DEBUG_FILE"/>
        <appender-ref ref="INFO_FILE"/>
    </logger>

    <!-- 关闭指定包的日志输出 -->
    <logger name="org.springframework" level="off"/>

    <!-- show parameters for hibernate sql 专为 Hibernate 定制 -->
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>
    <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG"/>
    <logger name="org.hibernate.SQL" level="DEBUG"/>
    <logger name="org.hibernate.engine.QueryParameters" level="DEBUG"/>
    <logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG"/>

    <!--mybatis log configure-->
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>

</configuration>
